generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                       String         @id @default(cuid())
  email                    String         @unique
  name                     String?
  image                    String?
  passwordHash             String?
  role                     UserRole       @default(USER)
  organization             String?
  permissions              Json?
  emailVerified            DateTime?
  emailVerificationToken   String?        @unique
  emailVerificationExpires DateTime?
  notificationPreferences  Json?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  accounts                 Account[]
  activities               Activity[]
  gedsiMetrics             GEDSIMetric[]
  notifications            Notification[]
  sessions                 Session[]
  assignedVentures         Venture[]      @relation("AssignedTo")
  createdVentures          Venture[]      @relation("CreatedBy")
  workflowsCreated         Workflow[]

  @@map("users")
}

model Venture {
  id                   String            @id @default(cuid())
  name                 String
  description          String?
  sector               String
  location             String
  website              String?
  contactEmail         String
  contactPhone         String?
  pitchSummary         String?
  inclusionFocus       String?
  founderTypes         String
  teamSize             Int?
  foundingYear         Int?
  targetMarket         String?
  revenueModel         String?
  revenue              Float?
  fundingRaised        Float?
  lastValuation        Float?
  stgGoals             Json?
  gedsiMetricsSummary  Json?
  financials           Json?
  documentsMetadata    Json?
  tags                 Json?
  operationalReadiness Json?
  capitalReadiness     Json?
  gedsiGoals           Json?
  washingtonShortSet   Json?
  disabilityInclusion  Json?
  aiAnalysis           Json?
  challenges           String?
  supportNeeded        String?
  timeline             String?
  
  // Calculated fields for GEDSI and Social Impact
  gedsiScore           Float?            // Calculated GEDSI alignment score (0-100)
  socialImpactScore    Float?            // Calculated social impact score (0-100)
  gedsiComplianceRate  Float?            // GEDSI metrics completion rate (0-100)
  totalBeneficiaries   Int?              // Total calculated beneficiaries
  jobsCreated          Int?              // Total calculated jobs created
  womenEmpowered       Int?              // Total calculated women empowered
  disabilityInclusive  Int?              // Total calculated disability inclusive metrics
  youthEngaged         Int?              // Total calculated youth engaged
  calculatedAt         DateTime?         // When calculations were last updated
  
  status               VentureStatus     @default(ACTIVE)
  stage                VentureStage      @default(INTAKE)
  intakeDate           DateTime?
  screeningDate        DateTime?
  dueDiligenceStart    DateTime?
  dueDiligenceEnd      DateTime?
  investmentReadyAt    DateTime?
  fundedAt             DateTime?
  nextReviewAt         DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdById          String
  assignedToId         String?
  activities           Activity[]
  capitalActivities    CapitalActivity[]
  documents            Document[]
  gedsiMetrics         GEDSIMetric[]
  assignedTo           User?             @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy            User              @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("ventures")
}

model GEDSIMetric {
  id               String        @id @default(cuid())
  ventureId        String
  metricCode       String
  metricName       String
  category         GEDSICategory
  targetValue      Float
  currentValue     Float
  unit             String
  status           MetricStatus  @default(NOT_STARTED)
  verificationDate DateTime?
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdById      String
  createdBy        User          @relation(fields: [createdById], references: [id])
  venture          Venture       @relation(fields: [ventureId], references: [id], onDelete: Cascade)

  @@map("gedsi_metrics")
}

model Document {
  id         String       @id @default(cuid())
  ventureId  String
  name       String
  type       DocumentType
  url        String
  size       Int?
  mimeType   String?
  uploadedAt DateTime     @default(now())
  venture    Venture      @relation(fields: [ventureId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Activity {
  id          String       @id @default(cuid())
  ventureId   String?
  userId      String
  type        ActivityType
  title       String
  description String?
  metadata    Json?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  venture     Venture?     @relation(fields: [ventureId], references: [id])

  @@map("activities")
}

model CapitalActivity {
  id           String              @id @default(cuid())
  ventureId    String
  type         CapitalActivityType
  amount       Float?
  currency     String              @default("USD")
  status       CapitalStatus       @default(PENDING)
  description  String?
  date         DateTime?
  investorName String?
  terms        Json?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  venture      Venture             @relation(fields: [ventureId], references: [id], onDelete: Cascade)

  @@map("capital_activities")
}

model IRISMetricCatalog {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  category    String?
  subcategory String?
  unit        String?
  definition  String?
  example     String?
  tags        Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("iris_metrics_catalog")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailLog {
  id           String      @id @default(cuid())
  to           String
  subject      String
  template     String?
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("email_logs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  description String?
  definition  Json
  isActive    Boolean       @default(true)
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  runs        WorkflowRun[]
  createdBy   User          @relation(fields: [createdById], references: [id])

  @@map("workflows")
}

model WorkflowRun {
  id           String            @id @default(cuid())
  workflowId   String
  status       WorkflowRunStatus @default(PENDING)
  input        Json?
  output       Json?
  errorMessage String?
  startedAt    DateTime          @default(now())
  finishedAt   DateTime?
  workflow     Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

enum UserRole {
  ADMIN
  MANAGER
  ANALYST
  USER
  VENTURE_MANAGER
  GEDSI_ANALYST
  CAPITAL_FACILITATOR
  EXTERNAL_STAKEHOLDER
}

enum VentureStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum VentureStage {
  INTAKE
  SCREENING
  DUE_DILIGENCE
  INVESTMENT_READY
  FUNDED
  EXITED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
}

enum GEDSICategory {
  GENDER
  DISABILITY
  SOCIAL_INCLUSION
  CROSS_CUTTING
}

enum MetricStatus {
  NOT_STARTED
  IN_PROGRESS
  VERIFIED
  COMPLETED
}

enum DocumentType {
  PITCH_DECK
  FINANCIAL_STATEMENTS
  BUSINESS_PLAN
  LEGAL_DOCUMENTS
  MARKET_RESEARCH
  TEAM_PROFILE
  OTHER
}

enum ActivityType {
  VENTURE_CREATED
  VENTURE_UPDATED
  METRIC_ADDED
  METRIC_UPDATED
  DOCUMENT_UPLOADED
  STAGE_CHANGED
  CAPITAL_ACTIVITY
  NOTE_ADDED
}

enum CapitalActivityType {
  GRANT
  DEBT
  EQUITY
  CONVERTIBLE_NOTE
  OTHER
}

enum CapitalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  WELCOME
  VENTURE_CREATED
  VENTURE_UPDATED
  GEDSI_ALERT
  FUNDING_OPPORTUNITY
  SYSTEM_UPDATE
  REPORT_READY
  STG_REMINDER
  WEEKLY_UPDATE
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum WorkflowRunStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
}
